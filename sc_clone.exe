#include <windows.h>
#include <iostream>
#include <string>

void QueryServiceStatus(const std::wstring& serviceName) {
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager) {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
        return;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), SERVICE_QUERY_STATUS);
    if (!hService) {
        std::wcerr << L"Failed to open service: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return;
    }

    SERVICE_STATUS_PROCESS ssp;
    DWORD bytesNeeded;
    if (QueryServiceStatusEx(hService, SC_STATUS_PROCESS_INFO, (LPBYTE)&ssp, sizeof(ssp), &bytesNeeded)) {
        std::wcout << L"Service status: " << ssp.dwCurrentState << std::endl;
    } else {
        std::wcerr << L"Failed to query service status: " << GetLastError() << std::endl;
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
}

void CreateServiceEntry(const std::wstring& serviceName, const std::wstring& binPath) {
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CREATE_SERVICE);
    if (!hSCManager) {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
        return;
    }

    SC_HANDLE hService = CreateService(
        hSCManager,
        serviceName.c_str(),
        serviceName.c_str(),
        SERVICE_ALL_ACCESS,
        SERVICE_WIN32_OWN_PROCESS,
        SERVICE_DEMAND_START,
        SERVICE_ERROR_NORMAL,
        binPath.c_str(),
        NULL, NULL, NULL, NULL, NULL);

    if (!hService) {
        std::wcerr << L"Failed to create service: " << GetLastError() << std::endl;
    } else {
        std::wcout << L"Service created successfully." << std::endl;
        CloseServiceHandle(hService);
    }

    CloseServiceHandle(hSCManager);
}

void StartServiceEntry(const std::wstring& serviceName) {
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager) {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
        return;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), SERVICE_START);
    if (!hService) {
        std::wcerr << L"Failed to open service: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return;
    }

    if (StartService(hService, 0, NULL)) {
        std::wcout << L"Service started successfully." << std::endl;
    } else {
        std::wcerr << L"Failed to start service: " << GetLastError() << std::endl;
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
}

void StopServiceEntry(const std::wstring& serviceName) {
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager) {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
        return;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), SERVICE_STOP);
    if (!hService) {
        std::wcerr << L"Failed to open service: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return;
    }

    SERVICE_STATUS status;
    if (ControlService(hService, SERVICE_CONTROL_STOP, &status)) {
        std::wcout << L"Service stopped successfully." << std::endl;
    } else {
        std::wcerr << L"Failed to stop service: " << GetLastError() << std::endl;
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
}

void DeleteServiceEntry(const std::wstring& serviceName) {
    SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
    if (!hSCManager) {
        std::wcerr << L"Failed to open service manager: " << GetLastError() << std::endl;
        return;
    }

    SC_HANDLE hService = OpenService(hSCManager, serviceName.c_str(), DELETE);
    if (!hService) {
        std::wcerr << L"Failed to open service: " << GetLastError() << std::endl;
        CloseServiceHandle(hSCManager);
        return;
    }

    if (DeleteService(hService)) {
        std::wcout << L"Service deleted successfully." << std::endl;
    } else {
        std::wcerr << L"Failed to delete service: " << GetLastError() << std::endl;
    }

    CloseServiceHandle(hService);
    CloseServiceHandle(hSCManager);
}

int wmain(int argc, wchar_t* argv[]) {
    if (argc < 3) {
        std::wcerr << L"Usage: sc_clone <command> <service_name> [options]" << std::endl;
        return 1;
    }
    
    std::wstring command = argv[1];
    std::wstring serviceName = argv[2];
    
    if (command == L"query") {
        QueryServiceStatus(serviceName);
    } else if (command == L"create" && argc == 4) {
        CreateServiceEntry(serviceName, argv[3]);
    } else if (command == L"start") {
        StartServiceEntry(serviceName);
    } else if (command == L"stop") {
        StopServiceEntry(serviceName);
    } else if (command == L"delete") {
        DeleteServiceEntry(serviceName);
    } else {
        std::wcerr << L"Unsupported or incorrect command usage." << std::endl;
    }
    
    return 0;
}
